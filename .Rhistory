points.2003_2017$Province, points.2003_2017$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 3)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 2003-2017 Localities (polygons)
polygons.2003_2017 <- mx_read("spatial_data/vectors/2003-2017_polygons")
# Layer 4: 2003-2017 Localities (points)
points.2003_2017 <- mx_read("spatial_data/vectors/2003-2017_points")
points.coordinates <- data.frame(st_coordinates(points.2003_2017))
points.2003_2017$X <- points.coordinates$X
points.2003_2017$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox <- st_bbox(polygons.2003_2017) %>% as.vector()
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.2003_2017, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.2003_2017$Locality, polygons.2003_2017$Province, polygons.2003_2017$Country, sep = ", ")) %>%
addCircleMarkers(data = points.2003_2017, ~X, ~Y, label = paste(points.2003_2017$Locality,
points.2003_2017$Province, points.2003_2017$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 3)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 2003-2017 Localities (polygons)
polygons.2003_2017 <- mx_read("spatial_data/vectors/2003-2017_polygons")
# Layer 4: 2003-2017 Localities (points)
points.2003_2017 <- mx_read("spatial_data/vectors/2003-2017_points")
points.coordinates <- data.frame(st_coordinates(points.2003_2017))
points.2003_2017$X <- points.coordinates$X
points.2003_2017$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox <- st_bbox(polygons.2003_2017) %>% as.vector()
#bbox1 <- st_as_sfc(st_bbox(polygons.2003_2017))
#bbox2 <- st_as_sfc(st_bbox(points.2003_2017))
#bbox3 <-  c(bbox1, bbox2)
#bbox <- st_bbox(bbox3)
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.2003_2017, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.2003_2017$Locality, polygons.2003_2017$Province, polygons.2003_2017$Country, sep = ", ")) %>%
addCircleMarkers(data = points.2003_2017, ~X, ~Y, label = paste(points.2003_2017$Locality,
points.2003_2017$Province, points.2003_2017$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 3)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
# Select records having collection numbers in the range of 1:1929 (collections from this time period, as per field notes)
RBCM.records.1973_1981 <- subset(RBCM.records, RBCM.records$CollectorsFieldNumber %in% 2962:2971)
UBC.records.1973_1981 <- subset(UBC.records, UBC.records$Collector.Number %in% 2962:2971)
# Sum specimens accessioned for the time period and infer number of records that remain undigitized
RBCM.HJ <- nrow(RBCM.records.1973_1981)
UBC.HJ <- nrow(UBC.records.1973_1981)
undigitized <- 9-(RBCM.HJ+UBC.HJ)
# Create Plotly Donut Chart
Collection <- c("RBCM", "UBC", "Undigitized")
Records <- c(RBCM.HJ, UBC.HJ, undigitized)
colors <-  c("#ffcf20FF", "#10a53dFF", "#541352FF")
digitized.summary <- data.frame(Collection,Records)
digitized.plot <- digitized.summary %>% plot_ly(labels = ~Collection, values = ~Records,
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)), showlegend = T)
digitized.plot <- digitized.plot %>% add_pie(hole = 0.6)
digitized.plot <- digitized.plot %>% layout(title = "Records digitized by collection",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
digitized.plot
bbox1 <- st_bbox(polygons.2003_2017)
bbox2 <- st_bbox(points.2003_2017)
bbox3 <-  c(bbox1, bbox2)
bbox <- st_bbox(bbox3)
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.2003_2017, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.2003_2017$Locality, polygons.2003_2017$Province, polygons.2003_2017$Country, sep = ", ")) %>%
addCircleMarkers(data = points.2003_2017, ~X, ~Y, label = paste(points.2003_2017$Locality,
points.2003_2017$Province, points.2003_2017$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 3)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
bbox <- st_bbox(polygons.2003_2017) %>% as.vector()
bbox1 <- st_as_sfc(st_bbox(polygons.2003_2017))
bbox2 <- st_as_sfc(st_bbox(points.2003_2017))
bbox3 <-  c(bbox1, bbox2)
bbox <- st_bbox(bbox3)
bbox <- st_bbox(polygons.2003_2017) %>% as.vector()
bbox1 <- st_as_sfc(st_bbox(polygons.2003_2017))
bbox2 <- st_as_sfc(st_bbox(points.2003_2017))
bbox3 <-  c(bbox1, bbox2)
bbox <- st_bbox(bbox3)
bbox
bbox <- st_bbox(polygons.2003_2017) %>% as.vector()
bbox
bbox1 <- st_as_sfc(st_bbox(polygons.2003_2017))
bbox2 <- st_as_sfc(st_bbox(points.2003_2017))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.2003_2017, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.2003_2017$Locality, polygons.2003_2017$Province, polygons.2003_2017$Country, sep = ", ")) %>%
addCircleMarkers(data = points.2003_2017, ~X, ~Y, label = paste(points.2003_2017$Locality,
points.2003_2017$Province, points.2003_2017$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 3)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1999-2003 Localities (polygons)
polygons.1999_2003 <- mx_read("spatial_data/vectors/1999-2003_polygons")
# Layer 4: 1981-1996 Localities (points)
points.1999_2003 <- mx_read("spatial_data/vectors/1999-2003_points")
points.coordinates <- data.frame(st_coordinates(points.1999_2003))
points.1999_2003$X <- points.coordinates$X
points.1999_2003$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1999_2003))
bbox2 <- st_as_sfc(st_bbox(points.1999_2003))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1999_2003, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1999_2003$Locality, polygons.1999_2003$Province, polygons.1999_2003$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1999_2003, ~X, ~Y, label = paste(points.1999_2003$Locality,
points.1999_2003$Province, points.1999_2003$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 3)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1981-1996 Localities (polygons)
polygons.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_polygons")
# Layer 4: 1981-1996 Localities (points)
points.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_points")
points.coordinates <- data.frame(st_coordinates(points.1981_1996))
points.1981_1996$X <- points.coordinates$X
points.1981_1996$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1981_1996))
bbox2 <- st_as_sfc(st_bbox(points.1981_1996))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1981_1996, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1981_1996$Locality, polygons.1981_1996$Province, polygons.1981_1996$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1981_1996, ~X, ~Y, label = paste(points.1981_1996$Locality,
points.1981_1996$Province, points.1981_1996$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 3)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(dplyr)
library(leaflet)
library(plotly)
library(raster)
library(sf)
library(tidyverse)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1973-1981 Localities (polygons)
polygons.1973_1981 <- mx_read("spatial_data/vectors/1973-1981_polygons")
# Layer 4: 1973-1981 Localities (points)
points.1973_1981 <- mx_read("spatial_data/vectors/1973-1981_points")
points.coordinates <- data.frame(st_coordinates(points.1973_1981))
points.1973_1981$X <- points.coordinates$X
points.1973_1981$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1973_1981))
bbox2 <- st_as_sfc(st_bbox(points.1973_1981))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1973_1981, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1973_1981$Locality, polygons.1973_1981$Province, polygons.1973_1981$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1973_1981, ~X, ~Y, label = paste(points.1973_1981$Locality,
points.1973_1981$Province, points.1973_1981$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 3)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Boundary
boundary <- mx_read("spatial_data/vectors/Salish_Sea")
# Create raster palette
pal <- colorNumeric(c("#08306b", "#f7fbff"), values(SS_DSM),
na.color = "transparent")
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Boundary
boundary <- mx_read("spatial_data/vectors/Salish_Sea")
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox <- st_bbox(boundary) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "#d5b43c", weight = 1, fillOpacity = 0) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(dplyr)
library(leaflet)
library(raster)
library(sf)
library(tidyverse)
install.packages("tidyverse")
source("scripts/utils.R")
# Layer 2: Salish Sea Boundary
boundary <- mx_read("spatial_data/vectors/Salish_Sea")
# Layer 3: Overview Localities (polygons)
polygons.overview <- mx_read("spatial_data/vectors/overview_polygons")
# Layer 4: Overview (points)
points.overview <- mx_read("spatial_data/vectors/overview_points")
points.coordinates <- data.frame(st_coordinates(points.overview))
points.overview$X <- points.coordinates$X
points.overview$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.overview))
bbox2 <- st_as_sfc(st_bbox(points.overview))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.overview, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.overview$Locality, polygons.overview$Province, polygons.overview$Country, sep = ", ")) %>%
addCircleMarkers(data = points.overview, ~X, ~Y, label = paste(points.overview$Locality,
points.overview$Province, points.overview$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(dplyr)
library(leaflet)
library(raster)
library(sf)
library(tidyverse)
source("scripts/utils.R")
# Layer 2: Salish Sea Boundary
boundary <- mx_read("spatial_data/vectors/Salish_Sea")
# Layer 3: Overview Localities (polygons)
polygons.overview <- mx_read("spatial_data/vectors/overview_polygons")
# Layer 4: Overview (points)
points.overview <- mx_read("spatial_data/vectors/overview_points")
points.coordinates <- data.frame(st_coordinates(points.overview))
points.overview$X <- points.coordinates$X
points.overview$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.overview))
bbox2 <- st_as_sfc(st_bbox(points.overview))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.overview, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.overview$Locality, polygons.overview$Province, polygons.overview$Country, sep = ", ")) %>%
addCircleMarkers(data = points.overview, ~X, ~Y, label = paste(points.overview$Locality,
points.overview$Province, points.overview$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
version(R)
version()
R
R()
R. version
R. version.
R.version
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1981-1996 Localities (polygons)
polygons.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_polygons")
# Layer 4: 1981-1996 Localities (points)
points.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_points")
points.coordinates <- data.frame(st_coordinates(points.1981_1996))
points.1981_1996$X <- points.coordinates$X
points.1981_1996$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1981_1996))
bbox2 <- st_as_sfc(st_bbox(points.1981_1996))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1981_1996, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1981_1996$Locality, polygons.1981_1996$Province, polygons.1981_1996$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1981_1996, ~X, ~Y, label = paste(points.1981_1996$Locality,
points.1981_1996$Province, points.1981_1996$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1981-1996 Localities (polygons)
polygons.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_polygons")
# Layer 4: 1981-1996 Localities (points)
points.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_points")
points.coordinates <- data.frame(st_coordinates(points.1981_1996))
points.1981_1996$X <- points.coordinates$X
points.1981_1996$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1981_1996))
bbox2 <- st_as_sfc(st_bbox(points.1981_1996))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1981_1996, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1981_1996$Locality, polygons.1981_1996$Province, polygons.1981_1996$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1981_1996, ~X, ~Y, label = paste(points.1981_1996$Locality,
points.1981_1996$Province, points.1981_1996$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
digitized.summary <- data.frame(Collection,Records)
Collection <- c("RBCM", "UBC", "Undigitized")
Records <- c(RBCM.HJ, UBC.HJ, undigitized)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1981-1996 Localities (polygons)
polygons.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_polygons")
# Layer 4: 1981-1996 Localities (points)
points.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_points")
points.coordinates <- data.frame(st_coordinates(points.1981_1996))
points.1981_1996$X <- points.coordinates$X
points.1981_1996$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1981_1996))
bbox2 <- st_as_sfc(st_bbox(points.1981_1996))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1981_1996, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1981_1996$Locality, polygons.1981_1996$Province, polygons.1981_1996$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1981_1996, ~X, ~Y, label = paste(points.1981_1996$Locality,
points.1981_1996$Province, points.1981_1996$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
View(UBC.records)
View(UBC.records)
View(RBCM.records)
library(dplyr)
library(dplyr)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1981-1996 Localities (polygons)
polygons.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_polygons")
# Layer 4: 1981-1996 Localities (points)
points.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_points")
points.coordinates <- data.frame(st_coordinates(points.1981_1996))
points.1981_1996$X <- points.coordinates$X
points.1981_1996$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1981_1996))
bbox2 <- st_as_sfc(st_bbox(points.1981_1996))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1981_1996, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1981_1996$Locality, polygons.1981_1996$Province, polygons.1981_1996$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1981_1996, ~X, ~Y, label = paste(points.1981_1996$Locality,
points.1981_1996$Province, points.1981_1996$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
View(UBC.records)
