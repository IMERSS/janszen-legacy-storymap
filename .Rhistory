polygons.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_polygons")
# Layer 4: 1981-1996 Localities (points)
points.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_points")
points.coordinates <- data.frame(st_coordinates(points.1981_1996))
points.1981_1996$X <- points.coordinates$X
points.1981_1996$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1981_1996))
bbox2 <- st_as_sfc(st_bbox(points.1981_1996))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1981_1996, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1981_1996$Locality, polygons.1981_1996$Province, polygons.1981_1996$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1981_1996, ~X, ~Y, label = paste(points.1981_1996$Locality,
points.1981_1996$Province, points.1981_1996$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
View(UBC.records)
View(UBC.records)
View(RBCM.records)
library(dplyr)
library(dplyr)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1981-1996 Localities (polygons)
polygons.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_polygons")
# Layer 4: 1981-1996 Localities (points)
points.1981_1996 <- mx_read("spatial_data/vectors/1981-1996_points")
points.coordinates <- data.frame(st_coordinates(points.1981_1996))
points.1981_1996$X <- points.coordinates$X
points.1981_1996$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1981_1996))
bbox2 <- st_as_sfc(st_bbox(points.1981_1996))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1981_1996, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1981_1996$Locality, polygons.1981_1996$Province, polygons.1981_1996$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1981_1996, ~X, ~Y, label = paste(points.1981_1996$Locality,
points.1981_1996$Province, points.1981_1996$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
View(UBC.records)
y <- c('giraffes', 'orangutans', 'monkeys')
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- data.frame(y, SF_Zoo, LA_Zoo)
View(data)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
library(dplyr)
library(leaflet)
library(plotly)
library(raster)
library(sf)
library(tidyverse)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1973-1981 Localities (polygons)
polygons.1973_1981 <- mx_read("spatial_data/vectors/1973-1981_polygons")
# Layer 4: 1973-1981 Localities (points)
points.1973_1981 <- mx_read("spatial_data/vectors/1973-1981_points")
points.coordinates <- data.frame(st_coordinates(points.1973_1981))
points.1973_1981$X <- points.coordinates$X
points.1973_1981$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1973_1981))
bbox2 <- st_as_sfc(st_bbox(points.1973_1981))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1973_1981, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1973_1981$Locality, polygons.1973_1981$Province, polygons.1973_1981$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1973_1981, ~X, ~Y, label = paste(points.1973_1981$Locality,
points.1973_1981$Province, points.1973_1981$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
# Select records having collection numbers in the range of 1:1929 (collections from this time period, as per field notes)
RBCM.records.1973_1981 <- subset(RBCM.records, RBCM.records$CollectorsFieldNumber %in% 1:1929)
UBC.records.1973_1981 <- subset(UBC.records, UBC.records$Collector.Number %in% 1:1929)
# Sum specimens accessioned for the time period and infer number of records that remain undigitized
RBCM.HJ <- nrow(RBCM.records.1973_1981)
UBC.HJ <- nrow(UBC.records.1973_1981)
undigitized <- 1929-(RBCM.HJ+UBC.HJ)
Collection <- c("RBCM", "UBC", "Undigitized")
Records <- c(RBCM.HJ, UBC.HJ, undigitized)
colors <-  c("#ffcf20FF", "#10a53dFF", "#541352FF")
digitized.summary <- data.frame(Collection,Records)
View(digitized.summary)
y <- c('Records', 'RBCM', 'UBC', 'Undigitized')
y <- c('Records')
RBCM.HJ
RBCM <- nrow(RBCM.records.1973_1981)
UBC <- nrow(UBC.records.1973_1981)
undigitized <- 1929-(RBCM.HJ+UBC.HJ)
y <- c('Records')
digitized.summary <- data.frame(y, RBCM, UBC, undigitized)
View(digitized.summary)
fig <- plot_ly(data, x = ~RBCM, y = ~y, type = 'bar', orientation = 'h', name = 'Royal BC Museum',
marker = list(color = '#ffcf20FF', opacity = 0.7, 7, width = 3))
fig <- fig %>% add_trace(x = ~UBC, name = 'University of British Columbia',
marker = list(color = '#10a53dFF', opacity = 0.7, 7, width = 3))
fig <- fig %>% add_trace(x = ~undigitized, name = 'Undigitized',
marker = list(color = '#541352FF', opacity = 0.7, 7, width = 3))
fig <- fig %>% layout(barmode = 'stack',
xaxis = list(title = ""),
yaxis = list(title =""))
fig
fig <- plot_ly(data, x = ~RBCM, y = ~y, type = 'bar', orientation = 'h', name = 'Royal BC Museum',
marker = color = '#ffcf20FF', opacity = 0.7, 7, width = 3)
df <-
ggplot2::diamonds %>%
group_by(cut) %>%
summarize(price = mean(price),
table = mean(table),
depth = mean(depth))
df_long <- df %>%
pivot_longer(cols = 2:4)
View(df_long)
RBCM.HJ <- nrow(RBCM.records.1981_1996)
library(dplyr)
library(leaflet)
library(plotly)
library(raster)
library(sf)
library(tidyverse)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1973-1981 Localities (polygons)
polygons.1973_1981 <- mx_read("spatial_data/vectors/1973-1981_polygons")
# Layer 4: 1973-1981 Localities (points)
points.1973_1981 <- mx_read("spatial_data/vectors/1973-1981_points")
points.coordinates <- data.frame(st_coordinates(points.1973_1981))
points.1973_1981$X <- points.coordinates$X
points.1973_1981$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1973_1981))
bbox2 <- st_as_sfc(st_bbox(points.1973_1981))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1973_1981, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1973_1981$Locality, polygons.1973_1981$Province, polygons.1973_1981$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1973_1981, ~X, ~Y, label = paste(points.1973_1981$Locality,
points.1973_1981$Province, points.1973_1981$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
# Select records having collection numbers in the range of 1:1929 (collections from this time period, as per field notes)
RBCM.records.1973_1981 <- subset(RBCM.records, RBCM.records$CollectorsFieldNumber %in% 1:1929)
UBC.records.1973_1981 <- subset(UBC.records, UBC.records$Collector.Number %in% 1:1929)
# Sum specimens accessioned for the time period and infer number of records that remain undigitized
RBCM.HJ <- nrow(RBCM.records.1981_1996)
RBCM.HJ <- nrow(RBCM.records.1973_1981)
UBC.HJ <- nrow(UBC.records.1973_1981)
undigitized <- 699-(RBCM.HJ+UBC.HJ)
# Create Plotly Donut Chart
Collection <- c("RBCM", "UBC", "Undigitized")
Records <- c(RBCM.HJ, UBC.HJ, undigitized)
View(digitized.summary)
library(dplyr)
library(leaflet)
library(plotly)
library(raster)
library(sf)
library(tidyverse)
source("scripts/utils.R")
# Layer 2: Boundary
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: 1973-1981 Localities (polygons)
polygons.1973_1981 <- mx_read("spatial_data/vectors/1973-1981_polygons")
# Layer 4: 1973-1981 Localities (points)
points.1973_1981 <- mx_read("spatial_data/vectors/1973-1981_points")
points.coordinates <- data.frame(st_coordinates(points.1973_1981))
points.1973_1981$X <- points.coordinates$X
points.1973_1981$Y <- points.coordinates$Y
# Define map bounds based on extent of combined SHP files (all shapes represented in project)
bbox1 <- st_as_sfc(st_bbox(polygons.1973_1981))
bbox2 <- st_as_sfc(st_bbox(points.1973_1981))
bbox3 <-  c(bbox1, bbox2)
bbox <- unname(st_bbox(bbox3))
# Render leaflet map
Map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatterNoLabels) %>%
addPolygons(data = polygons.1973_1981, color = "#d5b43c", weight = 1, fillOpacity = 0,
label = paste(polygons.1973_1981$Locality, polygons.1973_1981$Province, polygons.1973_1981$Country, sep = ", ")) %>%
addCircleMarkers(data = points.1973_1981, ~X, ~Y, label = paste(points.1973_1981$Locality,
points.1973_1981$Province, points.1973_1981$Country, sep = ", "),
fillColor = "#d5b43c",
fillOpacity = 1,
stroke = F,
radius = 4)  %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Create pie chart summarizing no. of records digitized by research collection (RBCM, UBC)
RBCM.records <- read.csv("tabular_data/HJ_RBCM_Records_2021-11-15.csv")
UBC.records <- read.csv("tabular_data/HJ_UBC_records_2023-02-12.csv")
# First remove non-numeric characters from collection numbers
RBCM.records$CollectorsFieldNumber <- gsub("[^0-9.]", "", RBCM.records$CollectorsFieldNumber)
RBCM.records$CollectorsFieldNumber <- as.numeric(RBCM.records$CollectorsFieldNumber)
UBC.records$Collector.Number <- gsub("[^0-9.]", "", UBC.records$Collector.Number)
UBC.records$Collector.Number <- as.numeric(UBC.records$Collector.Number)
# Remove records not attributable to Harvey from UBC records
UBC.records <- UBC.records %>% dplyr::filter(str_detect(Primary.Collector, 'Harvey Janszen'))
# Select records having collection numbers in the range of 1:1929 (collections from this time period, as per field notes)
RBCM.records.1973_1981 <- subset(RBCM.records, RBCM.records$CollectorsFieldNumber %in% 1:1929)
UBC.records.1973_1981 <- subset(UBC.records, UBC.records$Collector.Number %in% 1:1929)
# Sum specimens accessioned for the time period and infer number of records that remain undigitized
RBCM.HJ <- nrow(RBCM.records.1973_1981)
UBC.HJ <- nrow(UBC.records.1973_1981)
undigitized <- 699-(RBCM.HJ+UBC.HJ)
# Create stacked bar plots
Collection <- c("RBCM", "UBC", "Undigitized")
Records <- c(RBCM.HJ, UBC.HJ, undigitized)
colors <-  c("#ffcf20FF", "#10a53dFF", "#541352FF")
digitized.summary <- data.frame(Collection,Records)
plot_ly(
data = digitized.summary,
x = ~Collection,
y = ~Records,
color = ~Collection,
type = "bar"
) %>%
layout(barmode = "stack")
plot_ly(
data = digitized.summary,
x = ~Collection,
y = ~Records,
color = ~Collection,
type = "bar"
) %>%
layout(barmode = "stack")
plot_ly(
data = digitized.summary,
x = ~Collection,
y = ~Records,
color = ~Collection,
type = "bar"
) %>%
layout(barmode = "stack")
plot_ly(
data = digitized.summary,
x = ~Collection,
y = ~Records,
color = ~Collection,
type = "bar"
) %>%
layout(barmode = "stack")
fig <- plot_ly(digitized.summary,x = ~Records,
y=~Collection, type = 'bar', name = '2022') %>%
layout(yaxis = list(title = 'Placements_Count'),
barmode = 'stack',title="Placement Statistics")
fig
data <- data.frame(
Branches<-c('CSE','ECE','MECH','EEE','CIVIL'),
Placements_2021 <-c(99,98,89,90,75),
Placements_2022 <- c(95,94,93,85,77))
plot_ly(
data = digitized.summary,
x = ~Collection,
y = ~Records,
color = ~Collection
) %>%
layout(barmode = "stack")
plot_ly(
data = digitized.summary,
x = ~Collection,
y = ~Records,
color = ~Collection,
type = "bar"
) %>%
layout(barmode = "stack")
Frequency <- data.frame(Type = c("Quarterly", "halfyearly", "Yearly", "Weekly", "Other"),
Count = c(45, 13, 3, 18, 21))
Frequency %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ id,
y = ~ Count,
color = ~Type,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
View(Frequency)
plot %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
plot %>%
dplyr:mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
library(dplyr)
library(dplyr)
library(leaflet)
library(plotly)
library(raster)
library(sf)
library(tidyverse)
plot %>%
dplyr:mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
plot %>%
tidyr:mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
plot %>%
tidyr::mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
plot %>%
dplyr::mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
plot %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
digitized.summary %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
plot
digitized.summary %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
digitized.summary
digitized.summary %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
digitized.summary
digitized.summary %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
plot_ly(
x = ~ Collection,
y = ~ Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
Frequency %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~ id,
y = ~ Count,
color = ~Type,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
digitized.summary %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~Collection,
y = ~Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
digitized.summary %>%
mutate(id = as.factor(1)) %>%
plot_ly(
x = ~Collection,
y = ~Records,
color = ~Collection,
type = 'bar'
) %>%
layout(yaxis = list(title = 'Records'), barmode = 'stack')
